{-# LANGUAGE OverloadedStrings #-}

module ThinkMorse.Encoder where

import Data.Char (toUpper)
import Data.Map qualified as M
import Data.Text qualified as T

morseMap :: M.Map Char T.Text
morseMap =
  M.fromList
    [ ('A', ".-")
    , ('B', "-...")
    , ('C', "-.-.")
    , ('D', "-..")
    , ('E', ".")
    , ('F', "..-.")
    , ('G', "--.")
    , ('H', "....")
    , ('I', "..")
    , ('J', ".---")
    , ('K', "-.-")
    , ('L', ".-..")
    , ('M', "--")
    , ('N', "-.")
    , ('O', "---")
    , ('P', ".--.")
    , ('Q', "--.-")
    , ('R', ".-.")
    , ('S', "...")
    , ('T', "-")
    , ('U', "..-")
    , ('V', "...-")
    , ('W', ".--")
    , ('X', "-..-")
    , ('Y', "-.--")
    , ('Z', "--..")
    , ('0', "-----")
    , ('1', ".----")
    , ('2', "..---")
    , ('3', "...--")
    , ('4', "....-")
    , ('5', ".....")
    , ('6', "-....")
    , ('7', "--...")
    , ('8', "---..")
    , ('9', "----.")
    , ('А', ".-")
    , ('Б', "-...")
    , ('В', ".--")
    , ('Г', "--.")
    , ('Д', "-..")
    , ('Е', ".")
    , ('Ё', ".")
    , ('Ж', "...-")
    , ('З', "--..")
    , ('И', "..")
    , ('Й', ".---")
    , ('К', "-.-")
    , ('Л', ".-..")
    , ('М', "--")
    , ('Н', "-.")
    , ('О', "---")
    , ('П', ".--.")
    , ('Р', ".-.")
    , ('С', "...")
    , ('Т', "-")
    , ('У', "..-")
    , ('Ф', "..-.")
    , ('Х', "....")
    , ('Ц', "-.-.")
    , ('Ч', "---.")
    , ('Ш', "----")
    , ('Щ', "--.-")
    , ('Ъ', "-..-.")
    , ('Ы', "-.--")
    , ('Ь', "-..-")
    , ('Э', "..-..")
    , ('Ю', "..--")
    , ('Я', ".-.-")
    , (' ', " ")
    , ('.', ".-.-.-")
    , (',', "--..--")
    , ('?', "..--..")
    , ('\'', ".----.")
    , ('!', "-.-.--")
    , ('/', "-..-.")
    , ('(', "-.--.")
    , (')', "-.--.-")
    , ('&', ".-...")
    , (':', "---...")
    , (';', "-.-.-.")
    , ('=', "-...-")
    , ('+', ".-.-.")
    , ('-', "-....-")
    , ('_', "..--.-")
    , ('"', ".-..-.")
    , ('$', "...-..-")
    , ('@', ".--.-.")
    ]

encodeMorse :: T.Text -> T.Text
encodeMorse input =
  let wrds = T.split (== ' ') input
      encodeWord = T.intercalate " " . map encodeChar . T.unpack
      encodeChar c = M.findWithDefault "" (toUpper c) morseMap
   in T.intercalate "/" $ map encodeWord wrds
